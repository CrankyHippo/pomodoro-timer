{"version":3,"sources":["pomodoro/Break.js","pomodoro/Focus.js","pomodoro/TimeLeft.js","utils/duration/index.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["Break","formattedBreakLength","decrementBreakLengthByOne","incrementBreakLengthByOne","className","data-testid","type","onClick","Focus","formattedFocusLength","decrementFocusLengthByOneMinute","incrementFocusLengthByOne","id","TimeLeft","currentState","isPaused","hidden","progress","formattedTimeLeftInSeconds","formattedDurationInMinutes","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","Pomodoro","useState","currentSessionType","setCurrentSessionType","setCurrentState","focusLength","setFocusLength","breakLength","setBreakLength","timeLeft","setTimeLeft","duration","setDuration","isTimerRunning","setIsTimerRunning","setIsPaused","setHidden","setProgress","disabled","setDisabled","useEffect","classNameToBoolean","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","Audio","play","newFocusLength","newBreakLength","aria-label","title","prevState","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.637f859f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Break({\r\n  formattedBreakLength,\r\n  decrementBreakLengthByOne,\r\n  incrementBreakLengthByOne,\r\n}) {\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"float-right\">\r\n        <div className=\"input-group input-group-lg mb-2\">\r\n          <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n            {/* TODO: Update this text to display the current break session duration */}\r\n            Break Duration: {formattedBreakLength}\r\n          </span>\r\n          <div className=\"input-group-append\">\r\n            {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"decrease-break\"\r\n              onClick={decrementBreakLengthByOne}\r\n            >\r\n              <span className=\"oi oi-minus\" />\r\n            </button>\r\n            {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"increase-break\"\r\n              onClick={incrementBreakLengthByOne}\r\n            >\r\n              <span className=\"oi oi-plus\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Break;\r\n","import React from \"react\";\r\n\r\nfunction Focus({\r\n  formattedFocusLength,\r\n  decrementFocusLengthByOneMinute,\r\n  incrementFocusLengthByOne,\r\n}) {\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"input-group input-group-lg mb-2\">\r\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n          {/* TODO: Update this text to display the current focus session duration */}\r\n          Focus Duration: {formattedFocusLength}\r\n        </span>\r\n        <div className=\"input-group-append\">\r\n          {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n          <button\r\n            id=\"focus-decrement\"\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"decrease-focus\"\r\n            onClick={decrementFocusLengthByOneMinute}\r\n          >\r\n            <span className=\"oi oi-minus\" />\r\n          </button>\r\n          {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n          <button\r\n            id=\"focus-increment\"\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"increase-focus\"\r\n            onClick={incrementFocusLengthByOne}\r\n          >\r\n            <span className=\"oi oi-plus\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Focus;\r\n","import React from \"react\";\r\n\r\nfunction TimeLeft({\r\n  currentState,\r\n  isPaused,\r\n  hidden,\r\n  progress,\r\n  formattedTimeLeftInSeconds,\r\n  formattedDurationInMinutes,\r\n  formattedFocusLength,\r\n}) {\r\n  return (\r\n    hidden && (\r\n      <div>\r\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {currentState} for {formattedDurationInMinutes} minutes\r\n            </h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {formattedTimeLeftInSeconds} remaining\r\n            </p>\r\n            <h2>{isPaused}</h2>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={progress}\r\n                // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${progress}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default TimeLeft;\r\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React, { useEffect, useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Break from \"./Break\";\nimport Focus from \"./Focus\";\nimport TimeLeft from \"./TimeLeft\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  const [currentSessionType, setCurrentSessionType] = useState(\"Focus\");\n  const [currentState, setCurrentState] = useState(\"Focusing\");\n  const [focusLength, setFocusLength] = useState(1500);\n  const [breakLength, setBreakLength] = useState(300);\n  const [timeLeft, setTimeLeft] = useState(focusLength);\n  const [duration, setDuration] = useState(focusLength);\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(\"\");\n  const [hidden, setHidden] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [disabled, setDisabled] = useState(true);\n\n  //Focus Length Decrementation / Incrementation\n\n  const decrementFocusLengthByOne = () => {\n    const newFocusLength = focusLength - 300;\n    if (newFocusLength < 300) {\n      setFocusLength(300);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  };\n\n  const incrementFocusLengthByOne = () => {\n    const newFocusLength = focusLength + 300;\n    if (newFocusLength > 3600) {\n      setFocusLength(3600);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  };\n\n  // Break Length Decrementation / Incrementation\n\n  const decrementBreakLengthByOne = () => {\n    const newBreakLength = breakLength - 60;\n    if (newBreakLength < 60) {\n      setBreakLength(60);\n    } else {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  const incrementBreakLengthByOne = () => {\n    setBreakLength(breakLength + 60);\n  };\n\n  // TimeLeft\n\n  useEffect(() => {\n    setTimeLeft(focusLength);\n  }, [focusLength]);\n\n  useEffect(() => {\n    setDuration(focusLength);\n  }, [focusLength]);\n\n  // Break Length Formatization\n\n  let formattedBreakLength = secondsToDuration(breakLength);\n\n  // Focus Length formatization\n\n  let formattedFocusLength = minutesToDuration(focusLength / 60);\n\n  //TimeLeft formatization\n\n  let formattedTimeLeftInSeconds = secondsToDuration(timeLeft);\n\n  const formattedDurationInMinutes = minutesToDuration(duration / 60);\n\n  // Interval\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n\n      if (timeLeft > 0 && currentSessionType === \"Focus\") {\n        setTimeLeft(timeLeft - 1);\n        setProgress(progress + 100 / focusLength);\n      } else if (timeLeft > 0 && currentSessionType === \"Break\") {\n        setTimeLeft(timeLeft - 1);\n        setProgress(progress + 100 / breakLength);\n      } else if (currentSessionType === \"Focus\") {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setProgress(0);\n        setCurrentSessionType(\"Break\");\n        setCurrentState(\"On Break\");\n        setTimeLeft(breakLength);\n        setDuration(breakLength);\n\n        //setTimeLeft to breakTimeLength\n      } else if (timeLeft === 0 && currentSessionType === \"Break\") {\n        //Switch back to focusTime\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setProgress(0);\n        setCurrentSessionType(\"Focus\");\n        setCurrentState(\"Focusing\");\n        setTimeLeft(focusLength);\n        setDuration(focusLength);\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  // Pause Button\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n    setDisabled(false);\n    if (!isTimerRunning) {\n      setIsPaused(\"\");\n      setHidden(true);\n    } else {\n      setIsPaused(\"Paused\");\n    }\n  }\n\n  // Stop Button\n  const handleStopButton = () => {\n    //clear the timeout interval\n    setDisabled(true);\n    setTimeLeft(focusLength);\n    setIsTimerRunning(false);\n    setHidden(false);\n    setProgress(0);\n    setCurrentSessionType(\"Focus\");\n    setCurrentState(\"Focus\");\n    // set the interval null\n    // set the sessiontype to 'Session'\n  };\n\n  //Play Audio\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus\n          formattedFocusLength={formattedFocusLength}\n          decrementFocusLengthByOneMinute={decrementFocusLengthByOne}\n          incrementFocusLengthByOne={incrementFocusLengthByOne}\n        />\n        <Break\n          formattedBreakLength={formattedBreakLength}\n          decrementBreakLengthByOne={decrementBreakLengthByOne}\n          incrementBreakLengthByOne={incrementBreakLengthByOne}\n        />\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              onClick={!disabled && handleStopButton}\n              disabled={disabled}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <TimeLeft\n        currentState={currentState}\n        formattedFocusLength={formattedFocusLength}\n        formattedDurationInMinutes={formattedDurationInMinutes}\n        formattedTimeLeftInSeconds={formattedTimeLeftInSeconds}\n        isPaused={isPaused}\n        hidden={hidden}\n        progress={progress}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}